{"ast":null,"code":"import Axios from \"axios\";\nimport Cookies from \"js-cookie\";\nimport Config from \"../Config.json\";\nconst {\n  baseUrl\n} = Config;\nconst HTTPMethod = Object.freeze({\n  GET: \"GET\",\n  POST: \"POST\",\n  DELETE: \"DELETE\"\n});\n\nfunction initSocket() {\n  const {\n    common\n  } = Axios.defaults.headers;\n  common[\"session_id\"] = Cookies.get(\"session_id\");\n  Axios.defaults.baseURL = baseUrl;\n}\n\nasync function GET(path) {\n  return await sendHTTP(HTTPMethod.GET, path);\n}\n\nasync function POST(path, data) {\n  return await sendHTTP(HTTPMethod.POST, path, data);\n}\n\nasync function DELETE(path) {\n  return await sendHTTP(HTTPMethod.DELETE, path);\n}\n\nasync function sendHTTP(method, path, data) {\n  let response;\n\n  switch (method) {\n    case HTTPMethod.GET:\n      response = await Axios.get(path);\n      break;\n\n    case HTTPMethod.POST:\n      response = await Axios.post(path, data);\n      break;\n\n    case HTTPMethod.DELETE:\n      response = await Axios.delete(path);\n      break;\n\n    default: // Should never reach here\n\n  }\n  /************************************************\n        TODO Do error checking on response\n  ************************************************/\n\n\n  return await response;\n}\n/*\nasync function getReport(response) {\n  const axiosConfig = {\n    headers: { transaction_id: response.headers[\"transaction_id\"] }\n  };\n\n  return await pollForReport(axiosConfig);\n}\n\nasync function pollForReport(axiosConfig) {\n  let noContent = 204;\n\n  for (let i = 0; i < pollLimit; i++) {\n    const response = await Axios.get(gatewayEPs.reportEP, axiosConfig);\n\n    if (response.status !== noContent) {\n      /************************************************\n            TODO More Robust checking for response\n      ************************************************/\n\n/*\n      return response;\n    } else await timeOut();\n  }\n\n  return undefined;\n}\n*/\n\n/*\nasync function timeOut() {\n  return new Promise(resolve => {\n    let pollingLimit = 100;\n    setTimeout(() => resolve(), pollingLimit);\n  });\n}\n*/\n\n\nexport default {\n  initSocket,\n  GET,\n  POST,\n  DELETE\n};","map":{"version":3,"sources":["C:/Users/31505/Desktop/MemomusicFront1111-main/src/util/Socket.js"],"names":["Axios","Cookies","Config","baseUrl","HTTPMethod","Object","freeze","GET","POST","DELETE","initSocket","common","defaults","headers","get","baseURL","path","sendHTTP","data","method","response","post","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAEA,OAAOC,MAAP,MAAmB,gBAAnB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,MAApB;AAEA,MAAME,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc;AAC/BC,EAAAA,GAAG,EAAE,KAD0B;AAE/BC,EAAAA,IAAI,EAAE,MAFyB;AAG/BC,EAAAA,MAAM,EAAE;AAHuB,CAAd,CAAnB;;AAMA,SAASC,UAAT,GAAsB;AACpB,QAAM;AAAEC,IAAAA;AAAF,MAAaX,KAAK,CAACY,QAAN,CAAeC,OAAlC;AAEAF,EAAAA,MAAM,CAAC,YAAD,CAAN,GAAuBV,OAAO,CAACa,GAAR,CAAY,YAAZ,CAAvB;AAEAd,EAAAA,KAAK,CAACY,QAAN,CAAeG,OAAf,GAAyBZ,OAAzB;AACD;;AAED,eAAeI,GAAf,CAAmBS,IAAnB,EAAyB;AACvB,SAAO,MAAMC,QAAQ,CAACb,UAAU,CAACG,GAAZ,EAAiBS,IAAjB,CAArB;AACD;;AAED,eAAeR,IAAf,CAAoBQ,IAApB,EAA0BE,IAA1B,EAAgC;AAC9B,SAAO,MAAMD,QAAQ,CAACb,UAAU,CAACI,IAAZ,EAAkBQ,IAAlB,EAAwBE,IAAxB,CAArB;AACD;;AAED,eAAeT,MAAf,CAAsBO,IAAtB,EAA4B;AAC1B,SAAO,MAAMC,QAAQ,CAACb,UAAU,CAACK,MAAZ,EAAoBO,IAApB,CAArB;AACD;;AAED,eAAeC,QAAf,CAAwBE,MAAxB,EAAgCH,IAAhC,EAAsCE,IAAtC,EAA4C;AAC1C,MAAIE,QAAJ;;AAEA,UAAQD,MAAR;AACE,SAAKf,UAAU,CAACG,GAAhB;AACEa,MAAAA,QAAQ,GAAG,MAAMpB,KAAK,CAACc,GAAN,CAAUE,IAAV,CAAjB;AACA;;AACF,SAAKZ,UAAU,CAACI,IAAhB;AACEY,MAAAA,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,IAAN,CAAWL,IAAX,EAAiBE,IAAjB,CAAjB;AACA;;AACF,SAAKd,UAAU,CAACK,MAAhB;AACEW,MAAAA,QAAQ,GAAG,MAAMpB,KAAK,CAACsB,MAAN,CAAaN,IAAb,CAAjB;AACA;;AACF,YAVF,CAWE;;AAXF;AAcA;;;;;AAIA,SAAO,MAAMI,QAAb;AACD;AACD;;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;AAQA;;;;;;;;;;AAQA,eAAe;AACbV,EAAAA,UADa;AAEbH,EAAAA,GAFa;AAGbC,EAAAA,IAHa;AAIbC,EAAAA;AAJa,CAAf","sourcesContent":["import Axios from \"axios\";\nimport Cookies from \"js-cookie\";\n\nimport Config from \"../Config.json\";\n\nconst { baseUrl } = Config;\n\nconst HTTPMethod = Object.freeze({\n  GET: \"GET\",\n  POST: \"POST\",\n  DELETE: \"DELETE\"\n});\n\nfunction initSocket() {\n  const { common } = Axios.defaults.headers;\n\n  common[\"session_id\"] = Cookies.get(\"session_id\");\n\n  Axios.defaults.baseURL = baseUrl;\n}\n\nasync function GET(path) {\n  return await sendHTTP(HTTPMethod.GET, path);\n}\n\nasync function POST(path, data) {\n  return await sendHTTP(HTTPMethod.POST, path, data);\n}\n\nasync function DELETE(path) {\n  return await sendHTTP(HTTPMethod.DELETE, path);\n}\n\nasync function sendHTTP(method, path, data) {\n  let response;\n\n  switch (method) {\n    case HTTPMethod.GET:\n      response = await Axios.get(path);\n      break;\n    case HTTPMethod.POST:\n      response = await Axios.post(path, data);\n      break;\n    case HTTPMethod.DELETE:\n      response = await Axios.delete(path);\n      break;\n    default:\n    // Should never reach here\n  }\n\n  /************************************************\n        TODO Do error checking on response\n  ************************************************/\n\n  return await response;\n}\n/*\nasync function getReport(response) {\n  const axiosConfig = {\n    headers: { transaction_id: response.headers[\"transaction_id\"] }\n  };\n\n  return await pollForReport(axiosConfig);\n}\n\nasync function pollForReport(axiosConfig) {\n  let noContent = 204;\n\n  for (let i = 0; i < pollLimit; i++) {\n    const response = await Axios.get(gatewayEPs.reportEP, axiosConfig);\n\n    if (response.status !== noContent) {\n      /************************************************\n            TODO More Robust checking for response\n      ************************************************/\n/*\n      return response;\n    } else await timeOut();\n  }\n\n  return undefined;\n}\n*/\n/*\nasync function timeOut() {\n  return new Promise(resolve => {\n    let pollingLimit = 100;\n    setTimeout(() => resolve(), pollingLimit);\n  });\n}\n*/\nexport default {\n  initSocket,\n  GET,\n  POST,\n  DELETE\n};\n"]},"metadata":{},"sourceType":"module"}